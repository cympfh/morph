#!/usr/bin/env python

import json
import os
import os.path
import sqlite3
import sys
from dataclasses import dataclass, field
from typing import List, Optional, Union

import click


class RDB:
    def __init__(self, dbfile: str):
        self.dbfile = dbfile

    def initialize(self):
        conn = sqlite3.connect(self.dbfile)
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE items (
                id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                created DATETIME NOT NULL DEFAULT (datetime(CURRENT_TIMESTAMP, 'localtime'))
            )
        """
        )
        cur.execute(
            """
            CREATE UNIQUE INDEX
                index_item_id
            ON
                items(id)
        """
        )
        cur.execute(
            """
            CREATE TABLE transitions (
                tid INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                at DATETIME NOT NULL DEFAULT (datetime(CURRENT_TIMESTAMP, 'localtime')),
                id INTEGER NOT NULL,
                state TEXT NOT NULL,
                level INTEGER NOT NULL
            )
        """
        )
        conn.commit()
        conn.close()

    def execute(self, statement: str, *params) -> List[tuple]:
        conn = sqlite3.connect(self.dbfile)
        cur = conn.cursor()
        cur.execute(statement, params)
        ret = list(cur.fetchall())
        conn.commit()
        conn.close()
        return ret

    def dump(self):
        conn = sqlite3.connect(self.dbfile)
        for line in conn.iterdump():
            print(line)

    def load(self, dbfile: str):
        conn = sqlite3.connect(self.dbfile)
        conn.executescript(open(dbfile).read())


@dataclass
class Project:
    name: str
    dbfile: str = field(init=False)

    def __post_init__(self):
        home = os.environ["HOME"]
        cachedir = f"{home}/.cache/morph/"
        os.makedirs(cachedir, exist_ok=True)
        self.dbfile = f"{cachedir}/{self.name}"

    def is_exist(self) -> bool:
        return os.path.exists(self.dbfile)

    def touch(self):
        if self.is_exist():
            click.echo(f"Error: Project {self.name} already exists", err=True)
            sys.exit(1)

        rdb = RDB(self.dbfile)
        rdb.initialize()

    def delete(self):
        if not self.is_exist():
            click.echo(f"Error: Project {self.name} doesn't exist", err=True)
            sys.exit(1)

        os.unlink(self.dbfile)

    def stat(self, state: Optional[str], as_json: bool):
        if not self.is_exist():
            click.echo(f"Error: Project {self.name} doesn't exist", err=True)
            sys.exit(1)

        rdb = RDB(self.dbfile)
        rows = rdb.execute(
            """
            SELECT
                items.id, items.name, items.description, subq.state, subq.level
            FROM items
            INNER JOIN (
                SELECT * FROM transitions
                GROUP BY id
            ) subq
            ON items.id = subq.id
            ORDER BY subq.at DESC
        """
        )
        items = [
            Item(
                self,
                id=id,
                name=name,
                description=description,
                state=state,
                level=level,
            )
            for (id, name, description, state, level) in rows
        ]

        states = ["TODO", "WIP", "DONE", "ABORT"] if state is None else [state]
        res = {}
        for s in states:
            res[s] = [item for item in items if item.state == s]

        if as_json:
            print(json.dumps(res, cls=ItemJSONEncoder))

        else:
            for s in states:
                click.secho(f"# {s} ({len(res[s])} items)", fg="bright_black")
                for item in res[s]:
                    click.echo(
                        f"{item.name} @{item.id}, description = {item.description}, level = {item.level}"
                    )
                if len(res[s]) == 0:
                    click.secho("No items", fg="black")


@dataclass
class Item:
    project: Project
    name: Optional[str] = field(default=None)
    id: Optional[int] = field(default=None)
    description: Optional[str] = field(default=None)
    state: Optional[str] = field(default=None)
    level: Optional[int] = field(default=None)

    def __post_init__(self):
        assert self.name is not None or self.id is not None, "Specify Name or ID"

    def to_json(self) -> dict:
        return {
            "name": self.name,
            "id": self.id,
            "description": self.description,
            "state": self.state,
            "level": self.level,
        }

    def touch(self):
        assert self.name is not None, "Missed item name"

        if not self.project.is_exist():
            click.echo(f"Error: Project {self.name} doesn't exist", err=True)
            sys.exit(1)

        rdb = RDB(self.project.dbfile)
        rdb.execute(
            """
            INSERT INTO items
                (name, description)
            VALUES
                (?, ?)
            """,
            self.name,
            self.description,
        )
        items = rdb.execute(
            """
            SELECT * FROM items
            WHERE name = ?
            ORDER BY id DESC
            LIMIT 1
            """,
            self.name,
        )
        assert len(items) == 1, "BUG???"
        item_id = items[0][0]
        rdb.execute(
            """
            INSERT INTO transitions
                (id, state, level)
            VALUES
                (?, ?, ?)
            """,
            item_id,
            "TODO",
            0,
        )

    def identify(self):
        rdb = RDB(self.project.dbfile)

        # identify of name/id
        if self.id is None:
            items = rdb.execute("SELECT * FROM items WHERE name = ?", self.name)

            if len(items) > 1:
                click.echo(f"Error: Name {self.name} is ambiguous")
                click.echo(f"{len(items)} Items found:")
                for item in items:
                    click.echo(
                        f"+ id = @{item[0]}, name = {item[1]}, description = {item[2]}"
                    )
                sys.exit(1)

            if len(items) == 0:
                click.echo(f"Error: No items found for {self.name}")
                sys.exit(1)

            self.id = items[0][0]
            self.description = items[0][2]

        else:
            items = rdb.execute("SELECT * FROM items WHERE id = ?", self.id)
            if len(items) == 0:
                click.echo(f"Error: No items found for @{self.id}")
                sys.exit(1)
            self.name = items[0][1]
            self.description = items[0][2]

        # last state
        states = rdb.execute(
            """
            SELECT at, id, state, level FROM transitions
            WHERE id = ?
            ORDER BY tid DESC
            LIMIT 1
            """,
            self.id,
        )
        assert len(states) == 1, "BUG???"
        self.state = states[0][2]
        self.level = states[0][3]

    def update(self):
        rdb = RDB(self.project.dbfile)
        rdb.execute(
            """
            INSERT INTO transitions
                (id, state, level)
            VALUES
                (?, ?, ?)
            """,
            self.id,
            self.state,
            self.level,
        )

    def mv(self, state: str):
        assert state in {"TODO", "WIP", "DONE", "ABORT"}, f"Unknown state: {state}"

        if not self.project.is_exist():
            click.echo(f"Error: Project {self.name} doesn't exist", err=True)
            sys.exit(1)

        self.identify()

        if self.state == state:
            click.echo(
                f"Error: The State of Item {self.name}{self.id} is {state} already"
            )
            sys.exit(1)

        self.state = state
        self.update()

    def inc(self):
        if not self.project.is_exist():
            click.echo(f"Error: Project {self.name} doesn't exist", err=True)
            sys.exit(1)

        self.identify()

        if self.state != "WIP":
            click.echo("Error: Cannot inc the level not IN PROGRESS")
            sys.exit(1)

        self.level = int(self.level) + 1
        self.update()

    def delete(self):
        if not self.project.is_exist():
            click.echo(f"Error: Project {self.name} doesn't exist", err=True)
            sys.exit(1)

        self.identify()

        rdb = RDB(self.project.dbfile)
        rdb.execute("DELETE FROM items WHERE id = ?", self.id)
        rdb.execute("DELETE FROM transitions WHERE id = ?", self.id)

    def stat(self, as_json: bool):
        if not self.project.is_exist():
            click.echo(f"Error: Project {self.name} doesn't exist", err=True)
            sys.exit(1)

        self.identify()

        rdb = RDB(self.project.dbfile)
        transitions = rdb.execute(
            """
            SELECT at, state, level FROM transitions
            WHERE ID = ?
            ORDER BY at
            """,
            self.id,
        )

        if as_json:
            res = {
                "item": self,
                "history": transitions,
            }
            print(json.dumps(res, cls=ItemJSONEncoder))

        else:
            click.echo(f"name = {self.name}\nid = @{self.id}")
            click.echo(f"description = {self.description}")
            click.echo(f"State = {self.state}\nLevel = {self.level}")
            click.echo("History:")
            for i, (at, state, level) in enumerate(transitions):
                mark = click.style("  " if i == 0 else "->", fg="bright_yellow")
                click.echo(f"{mark} {state}/{level} -- {at}")


class ItemJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Item):
            return obj.to_json()
        return super().default(obj)


def from_name(name: str) -> Union[Project, Item]:
    if "/" in name:
        project_name, item_name = name.split("/", 1)
        project = Project(project_name)
        if not item_name.startswith("@"):
            return Item(project, name=item_name)
        else:
            return Item(project, id=int(item_name[1:]))

    else:
        project = Project(name)
        return project


@click.group()
def cli():
    pass


@cli.command()
@click.argument("name", type=str)
@click.option("--description", "-d", type=str, help="description for items", default="")
def new(name, description):
    entity = from_name(name)
    if isinstance(entity, Item):
        entity.description = description
    entity.touch()


@cli.command()
@click.argument("name", type=str)
def rm(name):
    entity = from_name(name)
    entity.delete()


@cli.command()
@click.argument("name", type=str)
@click.argument("state", type=str)
def mv(name, state):
    item = from_name(name)
    if isinstance(item, Project):
        click.echo(f"Error: {name} is not ItemName or ItemID")

    item.mv(state)


@cli.command()
@click.argument("name", type=str)
def inc(name):
    item = from_name(name)
    if isinstance(item, Project):
        click.echo(f"Error: {name} is not ItemName or ItemID")

    item.inc()


@cli.command()
@click.argument("name", type=str)
@click.option("--state", "-s", type=str, default=None)
@click.option("--json", is_flag=True, default=False)
def ls(name, state: Optional[str], json: bool):
    entity = from_name(name)
    if isinstance(entity, Project):
        project = entity
        project.stat(state, json)
    else:
        item = entity
        item.stat(json)


@cli.command("export")
@click.argument("name", type=str)
def cli_export(name):
    entity = from_name(name)
    if isinstance(entity, Item):
        click.echo("Error: project name required", err=True)
        sys.exit(1)

    rdb = RDB(entity.dbfile)
    rdb.dump()


@cli.command("import")
@click.argument("name", type=str)
@click.argument("dbfile", type=str)
def cli_import(name, dbfile):
    entity = from_name(name)
    if isinstance(entity, Item):
        click.echo("Error: project name required", err=True)
        sys.exit(1)

    rdb = RDB(entity.dbfile)
    rdb.load(dbfile)


if __name__ == "__main__":
    cli()
